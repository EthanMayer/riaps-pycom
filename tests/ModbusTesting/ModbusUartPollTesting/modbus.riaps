// RIAPS Modbus (UART) Poll Device Testing

app RIAPSModbusPollUART {
    message ModbusRequest;     // send Modbus action Request
    message ModbusResponse;    // get response from Modbus action, generally an ACK
    message ModbusReadData;    // sampled Modbus data
    message ModbusLogData;     // information for the logger to grab

    library serialModbusLib;

    // Modbus (UART) device interface - UART1 (default)
    // considered the server for the request/response interaction
    device ModbusUartPollDevice(slaveaddress=10,port='UART1',baudrate=57600,serialTimeout=1.0) {
      inside data;

      rep modbusRepPort : (ModbusRequest,ModbusResponse); // Port used to communicate with the ComputationalComponent
      pub modbusDataPub : ModbusReadData ;                // Modbus data available (single and polling commands)
      timer clock 50;
    }

    // Example Component to show Modbus I/F usage
    component ComputationalComponent() {
      timer clock 5000;
      pub tx_modbusData : ModbusLogData ;  	              // When data is ready, whether it is a single read/write or polled dataset
      sub rx_modbusData : ModbusReadData ;                // Receive the modbus data from the ModbusUartDevice
      req modbusReqPort : (ModbusRequest,ModbusResponse); // Port used to communicate with the ModbusUartDevice
    }

    component Logger(db_host='127.0.0.1', db_port=8086, db_name='MOdbusIO', db_user='riaps', db_password='riaps') {
      sub rx_modbusData : ModbusLogData;
    }

    // Modbus Communication Example actor using UART2
    actor ModbusExampleActor() {
      local ModbusRequest,ModbusResponse,ModbusReadData; // Local message types
      {
        modbus : ModbusUartPollDevice(slaveaddress=10,port='UART2',baudrate=57600,serialTimeout=3);  // Slave Address is in decimal
        commInitiator : ComputationalComponent();
      }
    }

    actor ModbusLogger(){
      {
        logger : Logger(db_host='127.0.0.1', db_port=8086, db_name='ModbusIO', db_user='riaps', db_password='riaps');
      }
    }
}
