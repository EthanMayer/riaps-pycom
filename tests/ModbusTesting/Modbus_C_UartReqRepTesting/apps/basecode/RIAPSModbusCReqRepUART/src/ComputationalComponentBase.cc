//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <ComputationalComponentBase.h>

namespace riapsmodbuscreqrepuart {
   namespace components {
      
      ComputationalComponentBase::ComputationalComponentBase(_component_conf_j &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void ComputationalComponentBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port) {
         auto portName = port->GetPortName();
         if (portName == PORT_TIMER_CLOCK) {
            OnClock(port);
         }
         
         
         
      }
      
      void ComputationalComponentBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool ComputationalComponentBase::SendTx_modbusData(capnp::MallocMessageBuilder &messageBuilder,
      riapsModbusUART::LogData::Builder &message) {
         std::cout<< "ComputationalComponentBase::SendTx_modbusData()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_PUB_TX_MODBUSDATA);
      }
      bool ComputationalComponentBase::SendModbusReqPort(capnp::MallocMessageBuilder &messageBuilder,
      riapsModbusUART::CommandFormat::Builder &message) {
         std::cout<< "ComputationalComponentBase::SendModbusReqPort()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_REQ_MODBUSREQPORT);
      }
      
      bool ComputationalComponentBase::RecvModbusReqPort(riapsModbusUART::ResponseFormat::Reader &message) {
         std::cout<< "ComputationalComponentBase::RecvModbusReqPort()"<< std::endl;
         auto port = GetRequestPortByName(PORT_REQ_MODBUSREQPORT);
         if (port == NULL) return false;
         
         capnp::FlatArrayMessageReader* messageReader;
         
         if (port->Recv(&messageReader)){
            message = messageReader->getRoot<riapsModbusUART::ResponseFormat>();
            return true;
         }
         return false;
      }
      
      ComputationalComponentBase::~ComputationalComponentBase() {
         
      }
   }
}
