//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <ModbusUARTBase.h>

namespace riapsmodbuscreqrepuart {
   namespace components {
      
      ModbusUARTBase::ModbusUARTBase(_component_conf &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void ModbusUARTBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port) {
         auto portName = port->GetPortName();
         if (portName == PORT_REP_MODBUSREPPORT) {
            auto reader = capnpreader->getRoot<riapsModbusUART::CommandFormat>();
            OnModbusRepPort(reader, port);
         }
         
         if (portName == PORT_TIMER_CLOCK) {
            OnClock(port);
         }
         
      }
      
      void ModbusUARTBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool ModbusUARTBase::SendModbusRepPort(capnp::MallocMessageBuilder& messageBuilder,
      riapsModbusUART::ResponseFormat::Builder& message) {
         std::cout<< "ModbusUARTBase::SendModbusRepPort()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_REP_MODBUSREPPORT);
      }
      
      ModbusUARTBase::~ModbusUARTBase() {
         
      }
   }
}
