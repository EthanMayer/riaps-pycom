/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.ide.contentassist.antlr;

import com.google.inject.Inject;
import edu.vanderbilt.riaps.ide.contentassist.antlr.internal.InternalDatatypesParser;
import edu.vanderbilt.riaps.services.DatatypesGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class DatatypesParser extends AbstractContentAssistParser {

	@Inject
	private DatatypesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDatatypesParser createParser() {
		InternalDatatypesParser result = new InternalDatatypesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_3(), "rule__Model__Alternatives_3");
					put(grammarAccess.getFTypeRefAccess().getAlternatives(), "rule__FTypeRef__Alternatives");
					put(grammarAccess.getFTypeAccess().getAlternatives(), "rule__FType__Alternatives");
					put(grammarAccess.getFBasicTypeIdAccess().getAlternatives(), "rule__FBasicTypeId__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getImportedFQNAccess().getGroup_1(), "rule__ImportedFQN__Group_1__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getFAnnotationBlockAccess().getGroup(), "rule__FAnnotationBlock__Group__0");
					put(grammarAccess.getFTypeCollectionAccess().getGroup(), "rule__FTypeCollection__Group__0");
					put(grammarAccess.getFTypeCollectionAccess().getGroup_5(), "rule__FTypeCollection__Group_5__0");
					put(grammarAccess.getFMessageCollectionAccess().getGroup(), "rule__FMessageCollection__Group__0");
					put(grammarAccess.getFMessageCollectionAccess().getGroup_5(), "rule__FMessageCollection__Group_5__0");
					put(grammarAccess.getFMessageAccess().getGroup(), "rule__FMessage__Group__0");
					put(grammarAccess.getFMessageAccess().getGroup_3(), "rule__FMessage__Group_3__0");
					put(grammarAccess.getFVersionAccess().getGroup(), "rule__FVersion__Group__0");
					put(grammarAccess.getFArrayTypeAccess().getGroup(), "rule__FArrayType__Group__0");
					put(grammarAccess.getFTypeDefAccess().getGroup(), "rule__FTypeDef__Group__0");
					put(grammarAccess.getFStructTypeAccess().getGroup(), "rule__FStructType__Group__0");
					put(grammarAccess.getFStructTypeAccess().getGroup_4(), "rule__FStructType__Group_4__0");
					put(grammarAccess.getFEnumerationTypeAccess().getGroup(), "rule__FEnumerationType__Group__0");
					put(grammarAccess.getFEnumerationTypeAccess().getGroup_4(), "rule__FEnumerationType__Group_4__0");
					put(grammarAccess.getFEnumerationTypeAccess().getGroup_6(), "rule__FEnumerationType__Group_6__0");
					put(grammarAccess.getFEnumerationTypeAccess().getGroup_6_1(), "rule__FEnumerationType__Group_6_1__0");
					put(grammarAccess.getFEnumeratorAccess().getGroup(), "rule__FEnumerator__Group__0");
					put(grammarAccess.getFEnumeratorAccess().getGroup_3(), "rule__FEnumerator__Group_3__0");
					put(grammarAccess.getFMapTypeAccess().getGroup(), "rule__FMapType__Group__0");
					put(grammarAccess.getFFieldAccess().getGroup(), "rule__FField__Group__0");
					put(grammarAccess.getFFieldAccess().getGroup_2(), "rule__FField__Group_2__0");
					put(grammarAccess.getModelAccess().getPackAssignment_1(), "rule__Model__PackAssignment_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_2(), "rule__Model__ImportsAssignment_2");
					put(grammarAccess.getModelAccess().getTypeCollectionsAssignment_3_0(), "rule__Model__TypeCollectionsAssignment_3_0");
					put(grammarAccess.getModelAccess().getMessageCollectionsAssignment_3_1(), "rule__Model__MessageCollectionsAssignment_3_1");
					put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getFAnnotationBlockAccess().getElementsAssignment_1(), "rule__FAnnotationBlock__ElementsAssignment_1");
					put(grammarAccess.getFAnnotationAccess().getRawTextAssignment(), "rule__FAnnotation__RawTextAssignment");
					put(grammarAccess.getFTypeCollectionAccess().getCommentAssignment_1(), "rule__FTypeCollection__CommentAssignment_1");
					put(grammarAccess.getFTypeCollectionAccess().getNameAssignment_3(), "rule__FTypeCollection__NameAssignment_3");
					put(grammarAccess.getFTypeCollectionAccess().getVersionAssignment_5_1(), "rule__FTypeCollection__VersionAssignment_5_1");
					put(grammarAccess.getFTypeCollectionAccess().getTypesAssignment_6(), "rule__FTypeCollection__TypesAssignment_6");
					put(grammarAccess.getFMessageCollectionAccess().getCommentAssignment_1(), "rule__FMessageCollection__CommentAssignment_1");
					put(grammarAccess.getFMessageCollectionAccess().getNameAssignment_3(), "rule__FMessageCollection__NameAssignment_3");
					put(grammarAccess.getFMessageCollectionAccess().getVersionAssignment_5_1(), "rule__FMessageCollection__VersionAssignment_5_1");
					put(grammarAccess.getFMessageCollectionAccess().getMessagesAssignment_6(), "rule__FMessageCollection__MessagesAssignment_6");
					put(grammarAccess.getFMessageAccess().getDerivedAssignment_1(), "rule__FMessage__DerivedAssignment_1");
					put(grammarAccess.getFMessageAccess().getNameAssignment_2(), "rule__FMessage__NameAssignment_2");
					put(grammarAccess.getFMessageAccess().getKeyAssignment_3_1(), "rule__FMessage__KeyAssignment_3_1");
					put(grammarAccess.getFVersionAccess().getMajorAssignment_3(), "rule__FVersion__MajorAssignment_3");
					put(grammarAccess.getFVersionAccess().getMinorAssignment_5(), "rule__FVersion__MinorAssignment_5");
					put(grammarAccess.getFTypeRefAccess().getPredefinedAssignment_0(), "rule__FTypeRef__PredefinedAssignment_0");
					put(grammarAccess.getFTypeRefAccess().getDerivedAssignment_1(), "rule__FTypeRef__DerivedAssignment_1");
					put(grammarAccess.getFArrayTypeAccess().getCommentAssignment_1(), "rule__FArrayType__CommentAssignment_1");
					put(grammarAccess.getFArrayTypeAccess().getNameAssignment_3(), "rule__FArrayType__NameAssignment_3");
					put(grammarAccess.getFArrayTypeAccess().getElementTypeAssignment_5(), "rule__FArrayType__ElementTypeAssignment_5");
					put(grammarAccess.getFTypeDefAccess().getCommentAssignment_1(), "rule__FTypeDef__CommentAssignment_1");
					put(grammarAccess.getFTypeDefAccess().getNameAssignment_3(), "rule__FTypeDef__NameAssignment_3");
					put(grammarAccess.getFTypeDefAccess().getActualTypeAssignment_5(), "rule__FTypeDef__ActualTypeAssignment_5");
					put(grammarAccess.getFStructTypeAccess().getCommentAssignment_1(), "rule__FStructType__CommentAssignment_1");
					put(grammarAccess.getFStructTypeAccess().getNameAssignment_3(), "rule__FStructType__NameAssignment_3");
					put(grammarAccess.getFStructTypeAccess().getBaseAssignment_4_1(), "rule__FStructType__BaseAssignment_4_1");
					put(grammarAccess.getFStructTypeAccess().getElementsAssignment_6(), "rule__FStructType__ElementsAssignment_6");
					put(grammarAccess.getFEnumerationTypeAccess().getCommentAssignment_1(), "rule__FEnumerationType__CommentAssignment_1");
					put(grammarAccess.getFEnumerationTypeAccess().getNameAssignment_3(), "rule__FEnumerationType__NameAssignment_3");
					put(grammarAccess.getFEnumerationTypeAccess().getBaseAssignment_4_1(), "rule__FEnumerationType__BaseAssignment_4_1");
					put(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsAssignment_6_0(), "rule__FEnumerationType__EnumeratorsAssignment_6_0");
					put(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsAssignment_6_1_1(), "rule__FEnumerationType__EnumeratorsAssignment_6_1_1");
					put(grammarAccess.getFEnumeratorAccess().getCommentAssignment_1(), "rule__FEnumerator__CommentAssignment_1");
					put(grammarAccess.getFEnumeratorAccess().getNameAssignment_2(), "rule__FEnumerator__NameAssignment_2");
					put(grammarAccess.getFEnumeratorAccess().getValueAssignment_3_1(), "rule__FEnumerator__ValueAssignment_3_1");
					put(grammarAccess.getFMapTypeAccess().getCommentAssignment_1(), "rule__FMapType__CommentAssignment_1");
					put(grammarAccess.getFMapTypeAccess().getNameAssignment_3(), "rule__FMapType__NameAssignment_3");
					put(grammarAccess.getFMapTypeAccess().getKeyTypeAssignment_5(), "rule__FMapType__KeyTypeAssignment_5");
					put(grammarAccess.getFMapTypeAccess().getValueTypeAssignment_7(), "rule__FMapType__ValueTypeAssignment_7");
					put(grammarAccess.getFFieldAccess().getCommentAssignment_0(), "rule__FField__CommentAssignment_0");
					put(grammarAccess.getFFieldAccess().getTypeAssignment_1(), "rule__FField__TypeAssignment_1");
					put(grammarAccess.getFFieldAccess().getArrayAssignment_2_0(), "rule__FField__ArrayAssignment_2_0");
					put(grammarAccess.getFFieldAccess().getNameAssignment_3(), "rule__FField__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalDatatypesParser typedParser = (InternalDatatypesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DatatypesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DatatypesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
